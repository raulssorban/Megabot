<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Humanlights.System</name>
    </assembly>
    <members>
        <member name="M:Humanlights.Extensions.ByteEx.Format``1(``0,Humanlights.Extensions.ByteEx.ByteTypes,System.Boolean,System.String,System.String)">
            <summary>
            Byte formatting. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="type">Filtering the byte.</param>
            <param name="shortName">e.g. Mb or Megabytes</param>
            <param name="valueFormat">The format of the numeral value.</param>
            <param name="stringFormat">String format. Providing more customization is better.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.ByteEx.Format``1(``0,Humanlights.Extensions.ByteEx.ByteTypes)">
            <summary>
            Raw byte formatting. Returns just the value into a double.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="type">Filter the byte.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.ByteEx.MakeCopy``1(``0)">
            <summary>
            Makes a brand new exact copy of the source, without dependencies to the original one. The source MUST be serializable and preferably not null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.StringArrayEx.ToString(System.String[])">
            <summary>
            Combines a string array into a string with space between them.
            </summary>
            <param name="array">Targeted string array.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.StringArrayEx.ToString(System.String[],System.String)">
            <summary>
            Combines a string array into a string with separator contents between them.
            </summary>
            <param name="array">Targeted string array.</param>
            <param name="separator">String array to string with this separation between each word.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.StringArrayEx.ToString(System.String[],System.String,System.String)">
            <summary>
            Combines a string array into a string with separator contents between them.
            </summary>
            <param name="array">Targeted string array.</param>
            <param name="separator">String array to string with this separation between each word.</param>
            <param name="lastSeparator">String array to string with this ending separation between the last word.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.StringArrayEx.ToString(System.String[],System.Int32,System.String,System.Boolean)">
            <summary>
            Combines a string array into a string with separator contents between them.
            </summary>
            <param name="array">Targeted string array.</param>
            <param name="startIndex">Gets the array starting from this index.</param>
            <param name="separator">String array to string with this separation between each word.</param>
            <param name="throwError">Return an error if errored about start index over it's length, if the case.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.StringArrayEx.ToString(System.String[],System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Combines a string array into a string with separator contents between them.
            </summary>
            <param name="array">Targeted string array.</param>
            <param name="startIndex">Gets the array starting from this index.</param>
            <param name="separator">String array to string with this separation between each word.</param>
            <param name="lastSeparator">String array to string with this ending separation between the last word.</param>
            <param name="throwError">Return an error if errored about start index over it's length, if the case.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.StringArrayEx.Split(System.String,System.Int32)">
            <summary>
            Cuts text into pieces at chunkSize size and returns them each.
            </summary>
            <param name="text">Targeted string.</param>
            <param name="chunkSize">Chunk size.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.CommandLineEx.GetArgumentResult(System.String[],System.String,System.String)">
            <summary>
            Returns the result after an argument in a args/string array.
            </summary>
            <param name="args">Targeted string array.</param>
            <param name="argument">Argument target to get from the string array.</param>
            <param name="Default">If returned no argument result/not found, return this Default string.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.CommandLineEx.GetArgumentResult(System.String,System.String)">
            <summary>
            Returns the result after an argument from the Environment.GetCommandLineArgs.
            </summary>
            <param name="argument">Argument target to get from the string array.</param>
            <param name="Default">If returned no argument result/not found, return this Default string.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.CommandLineEx.GetArgumentExists(System.String[],System.String)">
            <summary>
            Checks for a argument in the string array, if it is there, returns true.
            </summary>
            <param name="args">Targeted string array.</param>
            <param name="argument">Argument target to check if exists from the string array.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.CommandLineEx.GetArgumentExists(System.String)">
            <summary>
            Checks for a argument from the Environment.GetCommandLineArgs, if it is there, returns true.
            </summary>
            <param name="argument">Argument target to check if exists from the string array.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.OsEx.File.Exists(System.String)">
            <summary>
            Check if the file exists.
            </summary>
            <param name="file">The file to check.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.OsEx.File.Create(System.String,System.String)">
            <summary>
            Creating a new file (or overriding) with the content.
            </summary>
            <param name="file">The file path to create/override.</param>
            <param name="content">Text content that the file will have.</param>
        </member>
        <member name="M:Humanlights.Extensions.OsEx.File.Create(System.String,System.String[])">
            <summary>
            Creating a new file (or overriding) with the contents.
            </summary>
            <param name="file">The file path to create/override.</param>
            <param name="contents">Text contents that the file will have.</param>
        </member>
        <member name="M:Humanlights.Extensions.OsEx.File.Create(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Creating a new file (or overriding) with the contents.
            </summary>
            <param name="file">The file path to create/override.</param>
            <param name="contents">Text contents that the file will have.</param>
        </member>
        <member name="M:Humanlights.Extensions.OsEx.File.Create(System.String,System.Byte[])">
            <summary>
            Creating a new file (or overriding) with the contents.
            </summary>
            <param name="file">The file path to create/override.</param>
            <param name="contents">Text contents that the file will have.</param>
        </member>
        <member name="M:Humanlights.Extensions.OsEx.File.Delete(System.String)">
            <summary>
            Deleting a file at path.
            </summary>
            <param name="file">The file path to delete.</param>
        </member>
        <member name="M:Humanlights.Extensions.OsEx.File.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copies a file at path to the destination path.
            </summary>
            <param name="file">The file path to copy.</param>
            <param name="destination">The destination file path of the file to copy.</param>
            <param name="overwrite">Overwrites the file.</param>
        </member>
        <member name="M:Humanlights.Extensions.OsEx.File.Move(System.String,System.String,System.Boolean)">
            <summary>
            Moves a file at path to the destination path. 
            <para>Technically, copies the file and when done, removes it from the original path.</para>
            </summary>
            <param name="file">The file path to move.</param>
            <param name="destination">The destination file path of the file to move.</param>
            <param name="overwrite">Overwrites the file.</param>
        </member>
        <member name="M:Humanlights.Extensions.OsEx.File.Find(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Searches for a file in a folder.
            </summary>
            <param name="filter">It can be text, anything that could contain the files in the folder.</param>
            <param name="folder">The folder to search into.</param>
            <param name="option">You'll get what it means.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.OsEx.File.ReadText(System.String)">
            <summary>
            Reading the text of a file.
            </summary>
            <param name="file">The file path of the file that will read from.</param>
            <returns></returns>
            <example>
            var readedText = ReadText( yourpath );
            Console.Write( readedText );
            </example>
        </member>
        <member name="M:Humanlights.Extensions.OsEx.File.ReadTextLines(System.String)">
            <summary>
            Reading the text lines of a file.
            </summary>
            <param name="file">The file path of the file that will read from.</param>
            <returns></returns>
            <example>
            var readedTextLines = ReadText( yourpath );
            Console.Write( string.Join( ", ", readedTextLines );
            </example>
        </member>
        <member name="M:Humanlights.Extensions.OsEx.File.ReadBytes(System.String)">
            <summary>
            Reading the bytes of a file.
            </summary>
            <param name="file">The file path of the file that will read from.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.OsEx.Folder.Exists(System.String)">
            <summary>
            Check if the folder exists.
            </summary>
            <param name="folder">The folder to check.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.OsEx.Folder.Create(System.String,System.Boolean)">
            <summary>
            Creating a new folder (or recreating) at path.
            </summary>
            <param name="folder">The folder path to re/create.</param>
            <param name="recreate">If the folder exists, it will remove it first and then create it.</param>
        </member>
        <member name="M:Humanlights.Extensions.OsEx.Folder.Delete(System.String)">
            <summary>
            Deleting a folder at path.
            </summary>
            <param name="folder">The folder path to delete.</param>
        </member>
        <member name="M:Humanlights.Extensions.OsEx.Folder.DeleteFilesWithExtension(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Deleting all files with the extension in the folder.
            </summary>
            <param name="folder">The folder path.</param>
            <param name="extension">File extension. Do not include the dot. E.g "exe".</param>
            <param name="option">You'll get what it means.</param>
        </member>
        <member name="M:Humanlights.Extensions.OsEx.Folder.DeleteFilesWithExtension(System.String,System.String,System.String[],System.IO.SearchOption)">
            <summary>
            Deleting all files with the extension in the folder.
            </summary>
            <param name="folder">The folder path.</param>
            <param name="extension">File extension. Do not include the dot. E.g "exe".</param>
            <param name="exceptions">Deleting all files excepting these.</param>
            <param name="option">You'll get what it means.</param>
        </member>
        <member name="M:Humanlights.Extensions.OsEx.Folder.DeleteContents(System.String,System.String,System.String,System.IO.SearchOption)">
            <summary>
            Deleting all folders and files with the filters.
            </summary>
            <param name="folder"></param>
            <param name="folderPattern">"*" pattern means all directories in the folder.</param>
            <param name="filePattern">"*" pattern means all files in the folder.</param>
            <param name="option"></param>
        </member>
        <member name="M:Humanlights.Extensions.OsEx.Folder.Copy(System.String,System.String,System.Boolean,System.Boolean,System.IO.SearchOption)">
            <summary>
            Copies a folder at path to the destination path.
            </summary>
        </member>
        <member name="M:Humanlights.Extensions.OsEx.Folder.Move(System.String,System.String,System.Boolean,System.Boolean,System.IO.SearchOption)">
            <summary>
            Moves a folder at path to the destination path.
            <para>Technically, copies the folder and when done, removes it from the original path.</para>
            </summary>
        </member>
        <member name="M:Humanlights.Extensions.OsEx.Folder.GetFilesWithExtension(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns all files with the extension in the folder.
            </summary>
            <param name="folder">The folder path.</param>
            <param name="extension">File extension. Do not include the dot. E.g "exe".</param>
            <param name="option">You'll get what it means.</param>
        </member>
        <member name="M:Humanlights.Extensions.OsEx.Folder.GetFilesWithExtension(System.String,System.String,System.String[],System.IO.SearchOption)">
            <summary>
            Returns all files with the extension in the folder.
            </summary>
            <param name="folder">The folder path.</param>
            <param name="extension">File extension. Do not include the dot. E.g "exe".</param>
            <param name="exceptions">Deleting all files excepting these.</param>
            <param name="option">You'll get what it means.</param>
        </member>
        <member name="M:Humanlights.Extensions.OsEx.Utils.Copy(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Copies a file or folder at path to the destination path.
            If it's a folder, copies all folder's directories and subdirectories + files.
            </summary>
            <param name="fileOrFolder">The file or folder path to copy.</param>
            <param name="destination">The destination file path of the file or folder to copy.</param>
            <param name="subdirectories">Directories and subdirectories.</param>
            <param name="overwrite">Overwrites existing files.</param>
        </member>
        <member name="M:Humanlights.Extensions.OsEx.Utils.Move(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Moves a file or folder at path to the destination path.
            If it's a folder, moves all folder's directories and subdirectories + files.
            <para>Technically, copies the file or folder and when done, removes it from the original path.</para>
            </summary>
            <param name="fileOrFolder">The file or folder path to move.</param>
            <param name="destination">The destination file path of the file or folder to move.</param>
            <param name="subdirectories">Directories and subdirectories.</param>
            <param name="overwrite">Overwrites existing files.</param>
        </member>
        <member name="M:Humanlights.Extensions.OsEx.Utils.Delete(System.String)">
            <summary>
            Delete a file or folder at path.
            </summary>
            <param name="fileOrFolder">The file or folder path to remove.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.RandomEx.GetRandomString(System.Int32)">
            <summary>
            Returns a Random string that looks like a token or a boring code to write manually from a CD game.
            </summary>
            <param name="size">The length of the returned string (size of Randomization).</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.RandomEx.GetRandomString(System.Int32,System.String)">
            <summary>
            Returns a Random string that looks like a token or a boring code to write manually from a CD game.
            </summary>
            <param name="size">The length of the returned string (size of Randomization).</param>
            <param name="chars">Custom chars string of characters that'll get Randomized.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.RandomEx.GetRandomString(System.Int32,System.Int32)">
            <summary>
            Returns a Random string that looks like a token or a boring code to write manually from a CD game.
            </summary>
            <param name="size">The length of the returned string (size of Randomization).</param>
            <param name="seed">Unique seed of Randomization.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.RandomEx.GetRandomString(System.Int32,System.String,System.Int32)">
            <summary>
            Returns a Random string that looks like a token or a boring code to write manually from a CD game.
            </summary>
            <param name="size">The length of the returned string (size of Randomization).</param>
            <param name="chars">Custom chars string of characters that'll get Randomized.</param>
            <param name="seed">Unique seed of Randomization.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.RandomEx.GetRandomInteger(System.Int32,System.Int32)">
            <summary>
            Returns a Random integer.
            </summary>
            <param name="min">Minimum clamp. The Randomization doesn't go under this number.</param>
            <param name="max">Maximum clamp. The Randomization doesn't go over this number.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.RandomEx.GetRandomInteger">
            <summary>
            Returns a Random integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.RandomEx.GetRandomInteger(System.Int32)">
            <summary>
            Returns a Random integer.
            </summary>
            <param name="seed">Unique seed of Randomization.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.RandomEx.GetRandomInteger(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a Random integer.
            </summary>
            <param name="min">Minimum clamp. The Randomization doesn't go under this number.</param>
            <param name="max">Maximum clamp. The Randomization doesn't go over this number.</param>
            <param name="seed">Unique seed of Randomization.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.RandomEx.GetRandomFloat(System.Single,System.Single)">
            <summary>
            Returns a Random float.
            </summary>
            <param name="min">Minimum clamp. The Randomization doesn't go under this number.</param>
            <param name="max">Maximum clamp. The Randomization doesn't go over this number.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.RandomEx.GetRandomFloat">
            <summary>
            Returns a Random float.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.RandomEx.GetRandomFloat(System.Int32)">
            <summary>
            Returns a Random float.
            </summary>
            <param name="seed">Unique seed of Randomization.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.RandomEx.GetRandomFloat(System.Single,System.Single,System.Int32)">
            <summary>
            Returns a Random float.
            </summary>
            <param name="min">Minimum clamp. The Randomization doesn't go under this number.</param>
            <param name="max">Maximum clamp. The Randomization doesn't go over this number.</param>
            <param name="seed">Unique seed of Randomization.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.RandomEx.GetShuffledString(System.String)">
            <summary>
            Shuffles a string's characters like a pack of cards.
            </summary>
            <param name="str">String target.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.RandomEx.GetShuffledString(System.String,System.Int32)">
            <summary>
            Shuffles a string's characters like a pack of cards.
            </summary>
            <param name="str">String target.</param>
            <param name="seed">Unique seed of Randomization.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.StringEx.ToFloat(System.String,System.Single)">
            <summary>
            Parses the string into a float.
            </summary>
            <param name="str">String target.</param>
            <param name="Default">Default value.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.StringEx.ToInt(System.String,System.Int32)">
            <summary>
            Parses the string into a int.
            </summary>
            <param name="str">String target.</param>
            <param name="Default">Default value.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.StringEx.ToUint(System.String,System.UInt32)">
            <summary>
            Parses the string into a uint.
            </summary>
            <param name="str">String target.</param>
            <param name="Default">Default value.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.StringEx.ToBool(System.String,System.Boolean)">
            <summary>
            Parses the string into a bool.
            </summary>
            <param name="str">String target.</param>
            <param name="Default">Default value.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.StringEx.ToDecimal(System.String,System.Decimal)">
            <summary>
            Parses the string into a decimal.
            </summary>
            <param name="str">String target.</param>
            <param name="Default">Default value.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.StringEx.ToLong(System.String,System.Int64)">
            <summary>
            Parses the string into a long.
            </summary>
            <param name="str">String target.</param>
            <param name="Default">Default value.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.StringEx.ToUlong(System.String,System.UInt64)">
            <summary>
            Parses the string into a ulong.
            </summary>
            <param name="str">String target.</param>
            <param name="Default">Default value.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.StringEx.IsValid(System.String,System.String)">
            <summary>
            Checks if a string contains one of the valid characters.
            </summary>
            <param name="str">String target.</param>
            <param name="validCharacters">String of valid characters.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.StringEx.IsValidComplex(System.String,System.String)">
            <summary>
            Checks if a string contains one of the valid characters. Returns a array of characters that are invalid.
            </summary>
            <param name="str">String target.</param>
            <param name="validCharacters">String of valid characters.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.StringEx.Truncate(System.String,System.Int32)">
            <summary>
            Trucates the string's length to the maximum length (chops it).
            </summary>
            <param name="str">String target.</param>
            <param name="maxLength">String maximum size.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.StringEx.Truncate(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Trucates the string's length to the maximum length (chops it).
            </summary>
            <param name="str">String target.</param>
            <param name="maxLength">String maximum size.</param>
            <param name="elipsis">Usually those '...' at the end of a string.</param>
            <param name="countElipsisLength">If true, <paramref name="str"/>'s length will sum up with elipsis length, so it will chop it properly.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.StringEx.Plural(System.Int32,System.String,System.String)">
            <summary>
            Returns a plural when the number is not 1, and singular if it is.
            </summary>
            <param name="number"></param>
            <param name="singular"></param>
            <param name="plural"></param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.TimeEx.Format``1(``0,System.Boolean,System.Boolean)">
            <summary>
            Time formatting that includes date as well. Miliseconds, seconds, minutes, hours, days and weeks of the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="v"></param>
            <param name="shortName">Shows formatting short: ms, m, s, h, etc. or miliseconds, minutes, seconds, hours, etc.</param>
            <param name="showMiliseconds">Show miliseconds when is under the "showMilisecondsUnderSeconds" parameter.</param>
            <param name="showMilisecondsUnderSeconds">As the parameter's name says.</param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.TimeEx.FormatPlayer``1(``0,System.String,System.String)">
            <summary>
            It can work with: [ms] - miliseconds, [s] - seconds, [m] - minutes, [h] - hours, [d] - dayse and [w] - weeks.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="v"></param>
            <param name="format"></param>
            <param name="integerFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Humanlights.Extensions.WindowEx.ChangeTitle(System.String,System.String)">
            <summary>
            Changes the title name of a application with the name.
            </summary>
            <param name="oldTitle">Old application name.</param>
            <param name="newTitle">New application name.</param>
        </member>
    </members>
</doc>
